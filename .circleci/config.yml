version: 2.1

orbs:
  python: circleci/python@2.1.1
  node: circleci/node@5.1.0

workflows:
  visual-regression-testing:
    jobs:
      - setup-and-test
      - visual-regression-test:
          requires:
            - setup-and-test

jobs:
  # Job 1: Setup and run basic tests
  setup-and-test:
    docker:
      - image: cimg/python:3.9
    steps:
      - checkout
      
      - python/install-packages:
          pkg-manager: pip
          pip-dependency-file: requirements.txt
      
      - run:
          name: Test Flask application health
          command: |
            python app/app.py &
            APP_PID=$!
            sleep 5
            curl http://localhost:5000/api/health
            kill $APP_PID
      
      - run:
          name: Run Python linting
          command: |
            pip install flake8
            flake8 app/app.py --max-line-length=100 || true

  # Job 2: Visual Regression Testing with Parallelism
  visual-regression-test:
    docker:
      # Use Playwright's official Docker image with browsers pre-installed
      - image: mcr.microsoft.com/playwright:v1.40.0-focal
    
    # Enable parallelism - run tests across 3 containers
    parallelism: 3
    
    steps:
      - checkout
      
      # Install Python dependencies
      - run:
          name: Install Python dependencies
          command: |
            apt-get update && apt-get install -y python3-pip lsof
            pip3 install -r requirements.txt
      
      # Install Node.js dependencies (Playwright)
      - run:
          name: Install Node.js dependencies
          command: |
            npm install
      
      # Clean up any existing Flask processes
      - run:
          name: Kill any existing Flask processes
          command: |
            # Kill any process using port 5000
            lsof -ti:5000 | xargs kill -9 || true
            # Wait a moment to ensure port is freed
            sleep 2
      
      # Run Visual Regression Tests with Test Splitting
      # Playwright will automatically start/stop Flask via webServer config
      - run:
          name: Run Visual Regression Tests (Parallel)
          command: |
            # List all test files
            TESTFILES=$(find tests/visual -name "*.spec.js" | circleci tests split --split-by=filesize)
            
            echo "Container $CIRCLE_NODE_INDEX running tests:"
            echo "$TESTFILES"
            
            # Run only the tests assigned to this container
            if [ -n "$TESTFILES" ]; then
              npx playwright test $TESTFILES --project=chromium-desktop --update-snapshots || true
            else
              echo "No tests assigned to this container"
            fi
          no_output_timeout: 15m
      
      # Store test results
      - store_test_results:
          path: test-results
      
      # ‚≠ê KEY FEATURE: Store screenshots as individual PNG files
      # These will be viewable in CircleCI UI by clicking on them!
      
      # Store baseline screenshots (the actual PNG files!)
      - store_artifacts:
          path: tests/visual/homepage.spec.js-snapshots
          destination: screenshots/homepage
      
      - store_artifacts:
          path: tests/visual/dashboard.spec.js-snapshots
          destination: screenshots/dashboard
      
      - store_artifacts:
          path: tests/visual/profile.spec.js-snapshots
          destination: screenshots/profile
      
      # Store HTML report (optional - for detailed results)
      - store_artifacts:
          path: test-results/report
          destination: playwright-report
      
      - run:
          name: Results Summary
          when: always
          command: |
            echo "=========================================="
            echo "üì∏ Visual Regression Test Complete!"
            echo "=========================================="
            echo ""
            echo "Container: $CIRCLE_NODE_INDEX of $CIRCLE_NODE_TOTAL"
            echo ""
            echo "View your screenshots and reports in the 'Artifacts' tab above!"
            echo ""
            echo "Available artifacts (collected from all parallel runs):"
            echo "  üìÅ screenshots/homepage - Homepage visual tests"
            echo "  üìÅ screenshots/dashboard - Dashboard visual tests"
            echo "  üìÅ screenshots/profile - Profile visual tests"
            echo "  üìä playwright-report - Full HTML test report"
            echo "  üñºÔ∏è failure-screenshots - Any visual differences detected"
            echo "  üé• failure-videos - Videos of failed tests"
            echo ""
            echo "‚ú® Tests ran in parallel across $CIRCLE_NODE_TOTAL containers!"
            echo "=========================================="

